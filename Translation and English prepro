import nltk
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from nltk.corpus import stopwords
from nltk.corpus import wordnet
import nltk
import string
import re
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

drive.mount("/content/gdrive", force_remount=True)
dataset_path = '/content/gdrive/MyDrive/Speciale/output.json' #skal rettes alt efter hvor og hvordan koden køres
df = pd.read_json(dataset_path)

#oversættelses model - soruce: https://huggingface.co/Helsinki-NLP/opus-mt-da-en: 
translation_model_name = "Helsinki-NLP/opus-mt-da-en"
translation_tokenizer = MarianTokenizer.from_pretrained(translation_model_name)
translation_model = MarianMTModel.from_pretrained(translation_model_name)

def translate_danish_to_english(danish_text):
    print("Tokenizing Danish text...")
    encoded_text = translation_tokenizer(danish_text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    print("Generating translation...")
    translated = translation_model.generate(**encoded_text)
    print("Decoding translated text...")
    english_text = translation_tokenizer.decode(translated[0], skip_special_tokens=True)
    return english_text
df['eng'] = df['question'].apply(translate_danish_to_english)
print("Translation completed.")

output_pickle_path = '/content/gdrive/MyDrive/Speciale/translated_dataframe.pkl'
df.to_pickle(output_pickle_path)
print("Dataframe med oversat tekst er gemt som pickle-fil.")

#Prepros on English data, source: https://www.geeksforgeeks.org/text-preprocessing-in-python-set-1/
eng_df = df['eng']
eng_df.head()

p = inflect.engine()
def text_lowercase(text):
    return text.lower()

def convert_number(text):
    def replace_with_words(match):
        return p.number_to_words(match.group())
    return re.sub(r'\b\d+\b', replace_with_words, text)

def remove_punctuation(text):
    translator = str.maketrans('', '', string.punctuation)
    return text.translate(translator)

def remove_whitespace(text):
    return " ".join(text.split())

def remove_stopwords(text):
    stop_words = set(stopwords.words("english"))
    word_tokens = word_tokenize(text)
    filtered_text = [word for word in word_tokens if word not in stop_words]
    return " ".join(filtered_text)  # Joining the list to form a string

def preprocess_text(text):
    text = text_lowercase(text)
    text = convert_number(text)
    text = remove_punctuation(text)
    text = remove_whitespace(text)
    #text = remove_stopwords(text)  
    return text

eng_df['processed_eng'] = eng_df['eng'].apply(preprocess_text)
print(eng_df['processed_eng'], eng_df['eng'])
